plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'checkstyle'
	id 'jacoco'
}

group = 'com.godeltech'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly.extendsFrom compileOnly
    testAnnotationProcessor.extendsFrom annotationProcessor
    utilsImplementation.extendsFrom testImplementation
    utilsRuntimeOnly.extendsFrom testRuntimeOnly
    utilsCompileOnly.extendsFrom compileOnly
    utilsAnnotationProcessor.extendsFrom annotationProcessor
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'org.mapstruct:mapstruct-processor:1.6.3'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.1'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:testcontainers:1.20.4"
    testImplementation "org.testcontainers:junit-jupiter:1.20.4"
    testImplementation "org.testcontainers:postgresql:1.20.4"
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.wiremock.integrations:wiremock-spring-boot:3.6.0'
    testImplementation "org.wiremock:wiremock-jetty12:3.10.0"
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.21.1'
    configFile = file('google_checks.xml')
}

tasks.checkstyleMain {
    source 'src/main/java'
    include '**/*.java'
}

tasks.checkstyleTest {
    source 'src/test/java'
    include '**/*.java'
}

jacoco {
	toolVersion = "0.8.12"
	reportsDirectory = layout.buildDirectory.dir('jacocoReportDir')
}

test {
	finalizedBy jacocoTestReport
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
	dependsOn test

	classDirectories.setFrom(
			classDirectories.files.collect { file ->
				fileTree(dir: file, exclude: ['**/mapper/*',
                        'com/godeltech/currencyexchange/CurrencyExchangeApplication.class'
                ])
			}
	)
}

jacocoTestCoverageVerification {
	classDirectories.setFrom(
			classDirectories.files.collect { file ->
				fileTree(dir: file, exclude: '**/mapper/*')
			}
	)
	violationRules {
		rule {
			limit {
				minimum = 0.95
			}
		}
	}
}

sourceSets {
    main {
        java.srcDir 'src/main/java'
        resources.srcDir 'src/main/resources'
    }
    utils {
        java.srcDir file('src/utils/java')
        resources.srcDir file('src/utils/resources')
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
        compileClasspath += sourceSets.utils.output
        runtimeClasspath += sourceSets.utils.output
    }
}

check.dependsOn test

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }
